/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-06-10 14:54:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class payment_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- iam port 결제 등록 -->\r\n");
      out.write("<script src=\"https://cdn.iamport.kr/v1/iamport.js\"></script>\r\n");
      out.write("<!-- jquery cdn -->\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(function(){\r\n");
      out.write("		$(\"#kakaoPayment\").click(function(){\r\n");
      out.write("			getTokenAndPayment(); //호출\r\n");
      out.write("		})//kakaoPayment\r\n");
      out.write("		\r\n");
      out.write("		$(\"#getToken\").click(function(){\r\n");
      out.write("			getToken(); \r\n");
      out.write("		})//getToken\r\n");
      out.write("	})//ready	\r\n");
      out.write("	\r\n");
      out.write("	function getTokenAndPayment(){\r\n");
      out.write("        $.ajax({\r\n");
      out.write("            url: \"http://localhost/sist/getToken.do\",\r\n");
      out.write("            method: 'GET',\r\n");
      out.write("            success: function(response) {\r\n");
      out.write("                $('#tokenDisplay').text('받아온 토큰: ' + response);\r\n");
      out.write("                payment(response); // 토큰을 받은 후 결제 호출\r\n");
      out.write("            },\r\n");
      out.write("            error: function() {\r\n");
      out.write("                $('#tokenDisplay').text('토큰을 받아오는데 실패했습니다.');\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("	\r\n");
      out.write("	function payment(token){\r\n");
      out.write("		IMP.init('imp25425801');\r\n");
      out.write("		IMP.request_pay({\r\n");
      out.write("			pg: 'kakaopay.TC0ONETIME',\r\n");
      out.write("			pay_method: 'kakaopay',\r\n");
      out.write("			amount : 1000,\r\n");
      out.write("			buyer_name : '김무영',\r\n");
      out.write("			buyer_email  : 'sist@naver.com',\r\n");
      out.write("			buyer_tel  : '010-8623-5905',\r\n");
      out.write("			buyer_addr  : '쌍용교육센터 7강의실',\r\n");
      out.write("			name : '결제테스트'\r\n");
      out.write("		}, function(response) {\r\n");
      out.write("			//결제 후 호출되는 callback함수\r\n");
      out.write("			if ( response.success ) { //결제 성공\r\n");
      out.write("				console.log(response);\r\n");
      out.write("				sendPaymentData(response,token);\r\n");
      out.write("			} else {\r\n");
      out.write("				alert('결제실패 : ' + response.error_msg);\r\n");
      out.write("			}\r\n");
      out.write("		})\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	<!--paymentService 로 데이터 전송 ajax-->\r\n");
      out.write("	function sendPaymentData(paymentData,token) {\r\n");
      out.write("		const impUid = paymentData.imp_uid;\r\n");
      out.write("		alert( JSON.stringify(paymentData)  )\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			type: \"POST\",\r\n");
      out.write("			url: \"http://localhost/sist/payment.do\",\r\n");
      out.write("			data: JSON.stringify({\r\n");
      out.write("				imp_uid: impUid,\r\n");
      out.write("				payment_data: paymentData,\r\n");
      out.write("				token: token\r\n");
      out.write("			}),\r\n");
      out.write("			dataType:\"JSON\",\r\n");
      out.write("			contentType: \"application/json; charset=utf-8\",\r\n");
      out.write("			success: function(data) {\r\n");
      out.write("				alert(\"결제 데이터가 성공적으로 전송되었습니다!\");\r\n");
      out.write("                displayPaymentInfo(data); // 결제 정보 화면에 출력\r\n");
      out.write("			},\r\n");
      out.write("			error: function(err) {\r\n");
      out.write("				let errorMessage = \"결제 데이터 전송 오류: \" + err.status + \" \" + err.statusText + \" - \" + err.responseText;\r\n");
      out.write("				alert(errorMessage);\r\n");
      out.write("				console.log(\"에러 상세: \", err);\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	<!--토큰 발급 서비스 이동 ajax-->\r\n");
      out.write("	function getToken(){\r\n");
      out.write("        $.ajax({\r\n");
      out.write("            url: \"http://localhost/sist/getToken.do\",\r\n");
      out.write("            method: 'GET',\r\n");
      out.write("            success: function(response) {\r\n");
      out.write("                $('#tokenDisplay').text('받아온 토큰: ' + response);\r\n");
      out.write("            },\r\n");
      out.write("            error: function() {\r\n");
      out.write("                $('#tokenDisplay').text('토큰을 받아오는데 실패했습니다.');\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("    // 결제 정보를 화면에 출력하는 함수\r\n");
      out.write("    function displayPaymentInfo(paymentInfo) {\r\n");
      out.write("        $('#paymentInfo').html(\r\n");
      out.write("            '<p>상태: ' + paymentInfo.status + '</p>' +\r\n");
      out.write("            '<p>금액: ' + paymentInfo.amount + '</p>' +\r\n");
      out.write("            '<p>구매자 이름: ' + paymentInfo.buyer_name + '</p>' +\r\n");
      out.write("            '<p>구매자 전화번호: ' + paymentInfo.buyer_phone + '</p>' +\r\n");
      out.write("            '<p>구매자 이메일: ' + paymentInfo.member_email + '</p>' +\r\n");
      out.write("            '<p>구매자 주소: ' + paymentInfo.buyer_addr + '</p>' +\r\n");
      out.write("            '<p>결제 시간: ' + paymentInfo.paid_at + '</p>' +\r\n");
      out.write("            '<p>상품명: ' + paymentInfo.buy_product_name + '</p>' +\r\n");
      out.write("            '<p>구매자 ID: ' + paymentInfo.buyer_buyid + '</p>' +\r\n");
      out.write("            '<p>Merchant ID: ' + paymentInfo.buyer_merid + '</p>' +\r\n");
      out.write("            '<p>카드 번호: ' + paymentInfo.buyer_card_num + '</p>' +\r\n");
      out.write("            '<p>결제 상태: ' + paymentInfo.buyer_pay_ok + '</p>'\r\n");
      out.write("        );\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$(function(){\r\n");
      out.write("	\r\n");
      out.write("$(\"#KGPayment\").click(function(){\r\n");
      out.write("	getTokenAndPaymentKG();\r\n");
      out.write("	\r\n");
      out.write("})\r\n");
      out.write("\r\n");
      out.write("})\r\n");
      out.write("\r\n");
      out.write("	function getTokenAndPaymentKG(){\r\n");
      out.write("        $.ajax({\r\n");
      out.write("            url: \"http://localhost/sist/getToken.do\",\r\n");
      out.write("            method: 'GET',\r\n");
      out.write("            success: function(response) {\r\n");
      out.write("                $('#tokenDisplay').text('받아온 토큰: ' + response);\r\n");
      out.write("                paymentKG(response); // 토큰을 받은 후 결제 호출\r\n");
      out.write("            },\r\n");
      out.write("            error: function() {\r\n");
      out.write("                $('#tokenDisplay').text('토큰을 받아오는데 실패했습니다.');\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("function paymentKG(token){\r\n");
      out.write("	IMP.init('imp25425801');\r\n");
      out.write("	IMP.request_pay({\r\n");
      out.write("		pg: 'html5_inicis',\r\n");
      out.write("		pay_method: 'card',\r\n");
      out.write("		amount : 100,\r\n");
      out.write("		buyer_name : '김무영',\r\n");
      out.write("		buyer_email  : 'sist@naver.com',\r\n");
      out.write("		buyer_tel  : '010-8623-5905',\r\n");
      out.write("		buyer_addr  : '쌍용교육센터 7강의실', \r\n");
      out.write("		name : '결제테스트'\r\n");
      out.write("	}, function(response) {\r\n");
      out.write("		//결제 후 호출되는 callback함수\r\n");
      out.write("		if ( response.success ) { //결제 성공\r\n");
      out.write("			console.log(response);\r\n");
      out.write("			sendPaymentDataKG(response,token);\r\n");
      out.write("		} else {\r\n");
      out.write("			alert('결제실패 : ' + response.error_msg);\r\n");
      out.write("		}\r\n");
      out.write("	})\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("<!--paymentService 로 데이터 전송 ajax-->\r\n");
      out.write("function sendPaymentDataKG(paymentData,token) {\r\n");
      out.write("	const impUid = paymentData.imp_uid;\r\n");
      out.write("	alert( JSON.stringify(paymentData)  )\r\n");
      out.write("	$.ajax({\r\n");
      out.write("		type: \"POST\",\r\n");
      out.write("		url: \"http://localhost/sist/payment.do\",\r\n");
      out.write("		data: JSON.stringify({\r\n");
      out.write("			imp_uid: impUid,\r\n");
      out.write("			payment_data: paymentData,\r\n");
      out.write("			token: token\r\n");
      out.write("		}),\r\n");
      out.write("		dataType:\"JSON\",\r\n");
      out.write("		contentType: \"application/json; charset=utf-8\",\r\n");
      out.write("		success: function(data) {\r\n");
      out.write("			alert(\"결제 데이터가 성공적으로 전송되었습니다!\");\r\n");
      out.write("			displayPaymentInfoKG(data); // 결제 정보 화면에 출력\r\n");
      out.write("		},\r\n");
      out.write("		error: function(err) {\r\n");
      out.write("			let errorMessage = \"결제 데이터 전송 오류: \" + err.status + \" \" + err.statusText + \" - \" + err.responseText;\r\n");
      out.write("			alert(errorMessage);\r\n");
      out.write("			console.log(\"에러 상세: \", err);\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("// 결제 정보를 화면에 출력하는 함수\r\n");
      out.write("function displayPaymentInfoKG(paymentInfo) {\r\n");
      out.write("    $('#paymentInfo').html(\r\n");
      out.write("        '<p>상태: ' + paymentInfo.status + '</p>' +\r\n");
      out.write("        '<p>금액: ' + paymentInfo.amount + '</p>' +\r\n");
      out.write("        '<p>구매자 이름: ' + paymentInfo.buyer_name + '</p>' +\r\n");
      out.write("        '<p>구매자 전화번호: ' + paymentInfo.buyer_phone + '</p>' +\r\n");
      out.write("        '<p>구매자 이메일: ' + paymentInfo.member_email + '</p>' +\r\n");
      out.write("        '<p>구매자 주소: ' + paymentInfo.buyer_addr + '</p>' +\r\n");
      out.write("        '<p>결제 시간: ' + paymentInfo.paid_at + '</p>' +\r\n");
      out.write("        '<p>상품명: ' + paymentInfo.buy_product_name + '</p>' +\r\n");
      out.write("        '<p>구매자 ID: ' + paymentInfo.buyer_buyid + '</p>' +\r\n");
      out.write("        '<p>Merchant ID: ' + paymentInfo.buyer_merid + '</p>' +\r\n");
      out.write("        '<p>카드 번호: ' + paymentInfo.buyer_card_num + '</p>' +\r\n");
      out.write("        '<p>결제 상태: ' + paymentInfo.buyer_pay_ok + '</p>' +\r\n");
      out.write("        '<p>승인 번호: ' + paymentInfo.apply_num + '</p>'\r\n");
      out.write("    );\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class=\"ka_pay_btn\">\r\n");
      out.write("  <button type=\"button\" id=\"kakaoPayment\">카카오페이</button>\r\n");
      out.write("  <button type=\"button\" id=\"KGPayment\">KG이니시스</button>\r\n");
      out.write("  <button type=\"button\" id=getToken>토큰발급</button>\r\n");
      out.write("</div>\r\n");
      out.write(" <p id=\"tokenDisplay\">여기에 토큰이 표시됩니다.</p>\r\n");
      out.write("<div id=\"paymentInfo\">여기에 결제 정보가 표시됩니다.</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
