package kr.co.sist.elysian.user.dining.controller;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import kr.co.sist.elysian.user.dining.model.domain.DiningDomain;
import kr.co.sist.elysian.user.dining.model.domain.DiningOptionDomain;
import kr.co.sist.elysian.user.dining.model.vo.DiningResVO;
import kr.co.sist.elysian.user.dining.model.vo.DiningSeatsVO;
import kr.co.sist.elysian.user.dining.service.DiningService;

@Controller("userDiningController")
@RequestMapping("/user")
public class DiningController {

	@Autowired(required = false)
	private DiningService userDiningService;
	
	//화면접속시 랜덤한 다이닝 정보 가져오기 
	@GetMapping("/dining.do")
	public String searchRandomDiningDetail(Model model,HttpSession session) {


		//jackson에 값 설정
		ObjectMapper mapper = new ObjectMapper();
		DiningDomain dDomian = userDiningService.searchRandomDiningDetail();
		List<DiningOptionDomain> dOptionDomain = userDiningService.searchAllDiningName();
		model.addAttribute("diningList",dOptionDomain);
		String diningJson = "";
		try {
			diningJson = mapper.writeValueAsString(dDomian);
			model.addAttribute("diningJson",diningJson);
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return "user/resve/dining/step0";
		
	} // searchAllDiningList
	
	//select 요소에 해당하는 다이닝 정보 가져오기
	@ResponseBody
	@GetMapping("/selectDining.do")
	public String searchOneDiningDetail(@RequestParam("diningId")String diningId) {
		ObjectMapper mapper = new ObjectMapper();
		DiningDomain dDomain = userDiningService.searchOneDiningDetail(diningId);
		String diningJson = "";
		try {
			diningJson = mapper.writeValueAsString(dDomain);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
		}
		return diningJson;
	}
	
	
	
	@GetMapping("/dining_step0.do")
	public String diningBookingStep0(@ModelAttribute DiningResVO drVO,
			
			@RequestParam(name = "table", defaultValue =  "AVAILABLE_HALL_TABLE" )String table ,
			Model model,
			HttpSession session) {
		
		System.out.println(drVO);
		
		ObjectMapper mapper = new ObjectMapper();
		DiningDomain dDomain = userDiningService.searchOneDiningDetail(drVO.getDiningId());
		
		String diningJson = "";
		try {
			diningJson = mapper.writeValueAsString(dDomain);
			model.addAttribute("diningJson",diningJson);
		}catch(Exception e){
			e.printStackTrace();
		}
		
	

	   session.setAttribute("drVO", drVO);
		// 현재 날짜 구하기 (시스템 시계, 시스템 타임존) 
		LocalDate date = LocalDate.now();
        Map<String, Object> diningData = userDiningService.setDiningData(drVO.getDiningId(), date, table,2);
        model.addAttribute("openTime",dDomain.getOpenTime());
        model.addAttribute("closeTime",dDomain.getCloseTime());
        model.addAttribute("diningSeatsData",diningData);
        return "user/resve/dining/step1";
	} // diningBookingStep0
	
	
	
	// AJAX 요청을 처리하는 메소드
    @PostMapping("/getTimeSlots.do")
    @ResponseBody
    public Map<String, Object> getTimeSlots(
                                           @RequestParam("selectedDate") String strSelectedDate,
                                           @RequestParam("table") String table,
                                           @RequestParam("personCnt") String strPersonCnt,
                                           HttpSession session) {
       //JSON은 문자열이기때문에 알맞는 데이터형식으로 변환
		String diningId = (String)session.getAttribute("diningId");
    	int personCnt = Integer.parseInt(strPersonCnt);
    	
    	//날짜 형식 '-'로 변경
       String rpStrSelectedDate = strSelectedDate.replace('.', '-');
       LocalDate selectedDate =  LocalDate.parse(rpStrSelectedDate,DateTimeFormatter.ISO_DATE);
    	return userDiningService.setDiningData(diningId, selectedDate,table,personCnt);
    }
    
     
	
	
	 @PostMapping("/dining_step1.do")
	 String diningBookingStep1(
		        @RequestParam("visitDate") String visitDate,
		        @RequestParam("visitTime") String visitTime,
		        @RequestParam("personCount")String strPersonCount,
		        @RequestParam("diningTime")String strDiningTime,
		        Model model,
		        HttpSession session) {
			
			//인원수 정수 변환
			int personCount = Integer.parseInt(strPersonCount);

			DiningResVO drVO = (DiningResVO) session.getAttribute("drVO");
			DiningSeatsVO dsVO = new DiningSeatsVO();
		    // 다이닝 상세 정보 가져오기
		    DiningDomain diningDetail = userDiningService.searchOneDiningDetail(drVO.getDiningId());
		    int diningTime = Integer.parseInt(strDiningTime);
		    
		    //예약 VO에 값넣기
		    dsVO.setDiningTime(diningTime);
		    drVO.setVisitDate(visitDate);		    
		    drVO.setVisitTime(visitTime);
		    //좌석 VO에 값넣기
		    dsVO.setDiningTime(strDiningTime);
		    //예약자 정보 가져오기(이름,번호,이메일)
		    //세션에 있는 아이디 가져오기
		    String userIdSession = (String)session.getAttribute("userId");		   
		    String userName = "";
		    //세션이 널이면 임의의 값 집어넣기 (수정필요)
		    
		    //예약 vo 에 값 설정
		    DiningResVO drVOInfo  =  userDiningService.searchUserName(userIdSession);
		    drVO.setUserId(drVOInfo.getUserId());
		   	drVO.setVisitorName(drVOInfo.getName());
		   	drVO.setPhone(drVOInfo.getPhone());
		   	drVO.setEmail(drVOInfo.getEmail());
		   	drVO.setVisitPeople(personCount);
		    
		   	//다시 session에 값설정
		   	session.setAttribute("drVO", drVO);
		    	
		    // 데이터를 Model에 추가
		    model.addAttribute("visitDate", visitDate);
		    model.addAttribute("visitTime", visitTime);
		    model.addAttribute("personCount", personCount);
		    //model.addAttribute("dResVO",dResVO);
		    model.addAttribute("diningDetail", diningDetail); // 다이닝 상세 정보 추가
		return "user/resve/dining/step2";
	} // diningBookingStep1
	
//	 @ResponseBody
//	 @PostMapping("diningReserve.do")
//	 public int diningRerserve(
//		        @RequestParam("table") String table,
//	            @RequestParam("adultCount") int adultCount,
//	            @RequestParam("childCount") int childCount,
//	            @RequestParam("infantCount") int infantCount,
//	            @RequestParam("totalPrice") int totalPrice,
//	            @RequestParam("requests") String requests,
//	            HttpSession session) {
//		 DiningResVO dResVO = (DiningResVO) session.getAttribute("dResVO"); 
//	 
//	        dResVO.setTable(table);
//	        dResVO.setAdult(adultCount);
//	        dResVO.setChild(childCount);
//	        dResVO.setInfant(infantCount);
//	        dResVO.setDeposit(totalPrice);
//	        dResVO.setVisitorRequest(requests);
//		    System.out.println("===========================" + dResVO.toString());
//	        // 데이터베이스에 저장하는 로직 (DiningService를 통해 저장)
//	        int diningId = userDiningService.saveDiningReservation(dResVO);
//
//	        // 저장된 예약 ID 반환
//	        return diningId;
//	 }
//	 
	 @ResponseBody
	 @PostMapping(value="/diningResveValid.do", produces="application/json; charset=UTF-8")
	 public int resveValid(@RequestParam("table")String table,HttpSession session, Model model) {
		 DiningResVO dResVO = (DiningResVO) session.getAttribute("dResVO");
		 dResVO.setTable(table);
		 System.out.println(dResVO.toString());
		 
		 int resultDining =  userDiningService.reserveValid(dResVO);
		 
		 return resultDining;
	 }

} // class